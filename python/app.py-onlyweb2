import os
import uuid
import json
import asyncio
import urllib.request
import subprocess
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
import ssl
import shutil

# --- 配置 ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
FILE_PATH = os.environ.get('FILE_PATH', './.cache')
WORK_PORT = int(os.environ.get('SERVER_PORT') or os.environ.get('PORT') or 9999)

# 下载源
DOWNLOAD_URLS = [
    'http://fi10.bot-hosting.net:20980/web',
    'https://amd64.ssss.nyc.mn/web'
]

# --- UUID 处理 ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
UUID_FILE_PATH = os.path.join(SCRIPT_DIR, '.uuid')


def get_or_generate_uuid():
    if os.path.exists(UUID_FILE_PATH):
        with open(UUID_FILE_PATH, 'r') as f:
            return f.read().strip()
    else:
        new_uuid = str(uuid.uuid4())
        with open(UUID_FILE_PATH, 'w') as f:
            f.write(new_uuid)
        return new_uuid


UUID = get_or_generate_uuid()

# --- 目录创建 ---
def create_directories():
    os.makedirs(FILE_PATH, exist_ok=True)


# --- 生成配置 ---
def generate_config(uuid_str, work_port):
    config = {
        "log": {"access": "none", "error": "none", "loglevel": "none"},
        "dns": {"servers": ["https+local://1.1.1.1/dns-query"], "disableCache": True},
        "inbounds": [
            {
                "port": work_port,
                "protocol": "vless",
                "settings": {
                    "clients": [{"id": uuid_str}],
                    "decryption": "none",
                    "fallbacks": [
                        {"dest": 3001},
                        {"path": "/vless", "dest": 3002},
                        {"path": "/index.html", "dest": 3000}
                    ]
                }
            },
            {
                "port": 3001,
                "listen": "127.0.0.1",
                "protocol": "vless",
                "settings": {"clients": [{"id": uuid_str}], "decryption": "none"},
                "streamSettings": {"network": "xhttp", "xhttpSettings": {"path": "/xh"}}
            },
            {
                "port": 3002,
                "listen": "127.0.0.1",
                "protocol": "vless",
                "settings": {"clients": [{"id": uuid_str}], "decryption": "none"},
                "streamSettings": {"network": "ws", "wsSettings": {"path": "/vless"}}
            }
        ],
        "outbounds": [
            {"protocol": "freedom", "tag": "direct"},
            {"protocol": "blackhole", "tag": "block"}
        ]
    }
    with open(os.path.join(FILE_PATH, 'config.json'), 'w') as f:
        json.dump(config, f, indent=2)


# --- 健康检查 HTTP ---
class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"hello")

    def log_message(self, *args):
        pass  # 静默日志


# --- 下载 web ---
def download_web():
    web_path = os.path.join(FILE_PATH, 'web')
    for url in DOWNLOAD_URLS:
        try:
            req = urllib.request.Request(url.strip(), headers={'User-Agent': 'Mozilla/5.0'})
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            with urllib.request.urlopen(req, context=context) as response:
                with open(web_path, 'wb') as f:
                    f.write(response.read())
            os.chmod(web_path, 0o755)
            return True
        except Exception:
            continue
    return False


# --- 启动 web 进程 ---
def start_web_process():
    cmd = [os.path.join(FILE_PATH, 'web'), '-c', os.path.join(FILE_PATH, 'config.json')]
    try:
        subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, start_new_session=True)
        return True
    except Exception:
        return False


# --- 主逻辑 ---
async def main():
    create_directories()
    generate_config(UUID, WORK_PORT)

    loop = asyncio.get_running_loop()

    # 下载核心文件
    if not await loop.run_in_executor(None, download_web):
        return

    # 启动服务
    if not start_web_process():
        return

    # 启动健康检查服务（端口 3000）
    def run_http():
        HTTPServer(('', 3000), RequestHandler).serve_forever()

    threading.Thread(target=run_http, daemon=True).start()

    # 输出启动信息（仅一次）
    logging.info(f"running | uuid={UUID} | port={WORK_PORT}")

    # 90秒后清理缓存目录
    async def cleanup():
        await asyncio.sleep(90)
        try:
            if os.path.exists(FILE_PATH):
                shutil.rmtree(FILE_PATH)
        except:
            pass  # 静默失败

    asyncio.create_task(cleanup())

    # 🔁 主循环：每 5 分钟输出一次日志，防止平台休眠
    try:
        while True:
            await asyncio.sleep(300)  # 5 分钟
            logging.info("alive")
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    asyncio.run(main())
