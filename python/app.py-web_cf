import os
import uuid
import json
import asyncio
import urllib.request
import subprocess
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
import ssl
import re
import time
import shutil

# --- 配置 ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
FILE_PATH = os.environ.get('FILE_PATH', './.cache')
WORK_PORT = int(os.environ.get('SERVER_PORT') or os.environ.get('PORT') or 9999)
# 保留两个 amd 下载源
DOWNLOAD_URLS = [
    'http://fi10.bot-hosting.net:20980/web',
    'https://amd64.ssss.nyc.mn/web'
]

# --- Cloudflare 控制常量 ---
ENABLE_CLOUDFLARE = 'y' # 'y' 或 'yes' 才启用CF
CLOUDFLARE_PORT='5111'

# --- Cloudflare Argo 配置 ---
CLOUDFLARED_URL = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
TUNNEL_DURATION = 90  # 90秒后删除目录

# --- Cloudflare 隧道密钥配置 ---
CF_TUNNEL_TOKEN = 'eyJhIjoiNDg2ZmQ0NmRmYWJlMzQ3YmY0YWM0MDk0MGExODE1ZDkiLCJ0IjoiMjA1YTI2N2YtMmNiMy00Y2ZjLWI2NmMtYjVmZTQyOTQ0NjUzIiwicyI6Ik1qa3laakEyWldNdE5UWTFPUzAwTWpJNUxUZ3pZalV0TkRnd1lXTmxOR1l6WkRreiJ9'  # 隧道令牌

# --- 全局变量 ---
cloudflared_process = None
running = True

# --- UUID 处理 ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
UUID_FILE_PATH = os.path.join(SCRIPT_DIR, '.uuid')
def get_or_generate_uuid():
    if os.path.exists(UUID_FILE_PATH):
        with open(UUID_FILE_PATH, 'r') as f:
            return f.read().strip()
    else:
        new_uuid = str(uuid.uuid4())
        with open(UUID_FILE_PATH, 'w') as f:
            f.write(new_uuid)
        return new_uuid
UUID = get_or_generate_uuid()

# --- 目录创建 ---
def create_directories():
    os.makedirs(FILE_PATH, exist_ok=True)

# --- 配置生成 ---
def generate_config(uuid_str, work_port):
    config = {
        "log": {"access": "none", "error": "none", "loglevel": "none"},
        "dns": {"servers": ["https+local://1.1.1.1/dns-query"], "disableCache": True},
        "inbounds": [
            {
                "port": work_port,
                "protocol": "vless",
                "settings": {
                    "clients": [{"id": uuid_str}],
                    "decryption": "none",
                    "fallbacks": [
                        {"dest": 3001}, {"path": "/vless", "dest": 3002},
                        {"path": "/index.html", "dest": 3000}
                    ]
                }
            },
			{
                "port": CLOUDFLARE_PORT,
                "listen": "127.0.0.1",
                "protocol": "vless",
                "settings": {
                    "clients": [{"id": uuid_str}],
                    "decryption": "none",
                    "fallbacks": [ {"dest": 3001}, {"path": "/vless", "dest": 3002}]
                }
            },
            {
                "port": 3001, "listen": "127.0.0.1", "protocol": "vless",
                "settings": {"clients": [{"id": uuid_str}], "decryption": "none"},
                "streamSettings": {"network": "xhttp", "xhttpSettings": {"path": "/xh"}}
            },
            {
                "port": 3002, "listen": "127.0.0.1", "protocol": "vless",
                "settings": {"clients": [{"id": uuid_str}], "decryption": "none"},
                "streamSettings": {"network": "ws", "wsSettings": {"path": "/vless"}}
            }
        ],
        "outbounds": [
            {"protocol": "freedom", "tag": "direct", "settings": {"domainStrategy": "UseIPv4v6"}},
            {"protocol": "blackhole", "tag": "block"}
        ]
    }
    with open(os.path.join(FILE_PATH, 'config.json'), 'w') as f:
        json.dump(config, f, indent=2)

# --- HTTP Handler ---
class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain; charset=utf-8')
        self.end_headers()
        self.wfile.write(b"hello")
    def log_message(self, *args): pass

# --- 下载 web 文件 (带重试) ---
def download_web():
    web_path = os.path.join(FILE_PATH, 'web')
    for url in DOWNLOAD_URLS:
        try:
            req = urllib.request.Request(url.strip(), headers={'User-Agent': 'Mozilla/5.0 ...'})
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            with urllib.request.urlopen(req, context=context) as response:
                with open(web_path, 'wb') as f:
                    f.write(response.read())
            os.chmod(web_path, 0o775)
            logging.info(f"web 下载成功 (来源: {url})")
            return True
        except Exception as e:
            logging.warning(f"从 {url} 下载失败: {e}")
    logging.error("所有下载源都失败")
    return False

# --- 下载 Cloudflared (仅 Linux x86_64) ---
def download_cloudflared():
    # 检查是否启用 Cloudflare
    if ENABLE_CLOUDFLARE not in ['y', 'yes', '1', 'true']:
        logging.info("Cloudflare 已禁用，跳过下载")
        return True
    
    cloudflared_path = os.path.join(FILE_PATH, "cloudflared")
    try:
        req = urllib.request.Request(CLOUDFLARED_URL, headers={'User-Agent': 'Mozilla/5.0'})
        with urllib.request.urlopen(req) as response:
            with open(cloudflared_path, 'wb') as f:
                f.write(response.read())
        os.chmod(cloudflared_path, 0o755)
        logging.info("cloudflared 下载完成")
        return True
    except Exception as e:
        logging.error(f"cloudflared 下载失败: {e}")
        return False

# --- 启动 web 进程 ---
def start_web_process():
    cmd = [os.path.join(FILE_PATH, 'web'), '-c', os.path.join(FILE_PATH, 'config.json')]
    try:
        subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, start_new_session=True)
        return True
    except Exception as e:
        logging.error(f"启动 web 进程失败: {e}")
        return False

# --- 启动 Cloudflared Tunnel ---
def start_cloudflared_tunnel():
    # 检查是否启用 Cloudflare
    if ENABLE_CLOUDFLARE not in ['y', 'yes', '1', 'true']:
        logging.info("Cloudflare 已禁用，跳过启动")
        return True
    
    global cloudflared_process
    cloudflared_path = os.path.join(FILE_PATH, "cloudflared")
    if not os.path.exists(cloudflared_path):
        logging.error("未找到 cloudflared 二进制文件")
        return False

    # 检查是否配置了隧道令牌
    if CF_TUNNEL_TOKEN:
        # 使用隧道令牌方式
        logging.info("使用 Cloudflare 隧道令牌")
        cmd = [
            cloudflared_path,
            "--no-autoupdate",
            "tunnel",
            "run",
            "--token",
            CF_TUNNEL_TOKEN
        ]
    else:
        # 使用临时隧道
        logging.info("使用 Cloudflare 临时隧道")
        cmd = [cloudflared_path, "tunnel", "--url", f"http://localhost:{WORK_PORT}"]

    try:
        cloudflared_process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        logging.info("Cloudflared Tunnel 已启动")
        
        # 读取输出并提取域名信息
        def extract_tunnel_info():
            tunnel_info_shown = False
            while True:
                output = cloudflared_process.stdout.readline()
                if output:
                    if not CF_TUNNEL_TOKEN:
                        # 临时隧道：匹配临时域名
                        match = re.search(r'https://[a-zA-Z0-9\-]+\.trycloudflare\.com', output)
                        if match and not tunnel_info_shown:
                            tunnel_url = match.group(0)
                            logging.info(f"临时域名: {tunnel_url}")
                            tunnel_info_shown = True
                    else:
                        # 固定隧道：匹配连接成功信息
                        if ("Connection" in output and "registered" in output) and not tunnel_info_shown:
                            logging.info("固定隧道已连接到 Cloudflare")
                            tunnel_info_shown = True
                if cloudflared_process.poll() is not None:
                    break
        
        threading.Thread(target=extract_tunnel_info, daemon=True).start()
        return True
    except Exception as e:
        logging.error(f"Cloudflared 启动失败: {e}")
        return False

# --- 删除临时目录 ---
def cleanup_temp_directory():
    if os.path.exists(FILE_PATH):
        try:
            shutil.rmtree(FILE_PATH)
            logging.info(f"已删除临时目录: {FILE_PATH}")
        except Exception as e:
            logging.warning(f"删除临时目录 {FILE_PATH} 时出错: {e}")

# --- 持续运行函数 ---
async def keep_running():
    """让程序持续运行，避免被Pterodactyl认为崩溃"""
    global running
    start_time = time.time()
    cleaned_up = False
    
    while running:
        # 90秒后清理临时目录
        if not cleaned_up and time.time() - start_time >= TUNNEL_DURATION:
            cleanup_temp_directory()
            cleaned_up = True
            logging.info("临时目录已清理，程序继续运行...")
        
        await asyncio.sleep(1)

# --- 停止函数 ---
def stop_services():
    global running
    running = False
    logging.info("服务正在停止...")

# --- 主逻辑 ---
async def main():
    create_directories()
    generate_config(UUID, WORK_PORT)

    loop = asyncio.get_running_loop()
    if not await loop.run_in_executor(None, download_web):
        logging.error("下载 web 文件失败")
        return

    if not start_web_process():
        logging.error("启动 web 进程失败")
        return

    # 下载并启动 Cloudflared（根据 ENABLE_CLOUDFLARE 常量决定）
    if not await loop.run_in_executor(None, download_cloudflared):
        logging.warning("Cloudflared 下载失败")
    else:
        start_cloudflared_tunnel()

    threading.Thread(target=lambda: HTTPServer(('', 3000), RequestHandler).serve_forever(), daemon=True).start()
    logging.info(f"UUID: {UUID}")
    logging.info(f"服务运行在端口 {WORK_PORT}")
    
    # 显示 Cloudflare 状态
    if ENABLE_CLOUDFLARE in ['y', 'yes', '1', 'true']:
        if CF_TUNNEL_TOKEN:
            logging.info("Cloudflare 固定域名隧道已启用")
        else:
            logging.info("Cloudflare 临时域名隧道已启用")
    else:
        logging.info("Cloudflare 已禁用")
    
    logging.info(f"程序将持续运行，{TUNNEL_DURATION}秒后清理临时目录")

    # 持续运行
    try:
        await keep_running()
    except KeyboardInterrupt:
        stop_services()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("程序被用户中断")
