const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// 配置
const FILE_PATH = path.resolve(__dirname, 'tmp');
const PORT = process.env.SERVER_PORT || process.env.PORT || 3000;
const DOWNLOAD_URL = process.env.DOWNLOAD_WEB || 'http://fi10.bot-hosting.net:20980/web';
const BACKUP_URL = (process.env.DOWNLOAD_WEB_BACKUP || 'https://amd64.ssss.nyc.mn/web').trim();

// 工具函数
const generateUUID = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
  const r = Math.random() * 16 | 0;
  return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
});

const getOrCreateUUID = () => {
  const uuidFile = path.join(__dirname, '.uuid');
  try {
    const uuid = fs.readFileSync(uuidFile, 'utf-8').trim();
    console.log(`✅ 使用已存在的 UUID: ${uuid}`);
    return uuid;
  } catch {
    const uuid = generateUUID();
    fs.writeFileSync(uuidFile, uuid);
    console.log(`🆕 新生成 UUID: ${uuid}`);
    return uuid;
  }
};

// 删除tmp目录
const cleanup = () => {
  if (fs.existsSync(FILE_PATH)) {
    fs.rmSync(FILE_PATH, { recursive: true, force: true });
    console.log('🗑️ tmp目录已删除');
  }
};

// 创建目录和配置
const setup = (uuid) => {
  if (!fs.existsSync(FILE_PATH)) {
    fs.mkdirSync(FILE_PATH, { recursive: true });
    console.log('📁 tmp目录已创建');
  }
  
  const config = {
    log: { access: 'none', error: 'none', loglevel: 'none' },
    inbounds: [
      {
        port: parseInt(PORT),
        protocol: 'vless',
        settings: {
          clients: [{ id: uuid }],
          decryption: 'none',
          fallbacks: [
            { dest: 3001 },
            { path: "/vless", dest: 3002 }
          ]
        }
      },
      {
        port: 3001,
        listen: "127.0.0.1",
        protocol: "vless",
        settings: { clients: [{ id: uuid }], decryption: "none" },
        streamSettings: { network: "xhttp", xhttpSettings: { path: "/xh" } }
      },
      {
        port: 3002,
        listen: "127.0.0.1",
        protocol: "vless",
        settings: { clients: [{ id: uuid }], decryption: "none" },
        streamSettings: { network: "ws", wsSettings: { path: "/vless" } }
      }
    ],
    dns: {
      servers: ["https+local://1.1.1.1/dns-query"],
      disableCache: true
    },
    outbounds: [
      { protocol: "freedom", tag: "direct", settings: { domainStrategy: "UseIPv4v6" } },
      { protocol: "blackhole", tag: "block" }
    ]
  };
  
  const configPath = path.join(FILE_PATH, 'config.json');
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  console.log('⚙️ 配置文件已生成');
  return configPath;
};

// 下载文件
const downloadFile = (url, filePath) => {
  return new Promise((resolve, reject) => {
    console.log(`📥 正在下载: ${url}`);
    const file = fs.createWriteStream(filePath);
    const req = (url.startsWith('https') ? https : http).get(url, res => {
      if (res.statusCode >= 200 && res.statusCode < 300) {
        res.pipe(file);
        file.on('finish', () => {
          file.close();
          console.log(`✅ 下载成功: ${path.basename(filePath)}`);
          resolve();
        });
      } else {
        console.log(`❌ 下载失败 HTTP ${res.statusCode}: ${url}`);
        reject(new Error(`HTTP ${res.statusCode}`));
      }
    });
    req.on('error', (err) => {
      console.log(`❌ 下载错误: ${url} - ${err.message}`);
      reject(err);
    });
    req.setTimeout(30000, () => {
      req.destroy();
      console.log(`❌ 下载超时: ${url}`);
      reject(new Error('Timeout'));
    });
  });
};

// 启动服务
const startService = async () => {
  console.log('🚀 开始启动核心服务...');
  cleanup();
  
  const uuid = getOrCreateUUID();
  const configPath = setup(uuid);
  console.log(`📄 配置文件路径: ${configPath}`);
  
  try {
    const webPath = path.join(FILE_PATH, 'web');
    
    // 尝试主URL下载
    try {
      await downloadFile(DOWNLOAD_URL, webPath);
    } catch (primaryError) {
      console.log('⚠️ 主URL下载失败，尝试备用URL...');
      try {
        await downloadFile(BACKUP_URL, webPath);
      } catch (backupError) {
        throw new Error('主备URL都下载失败');
      }
    }
    
    // 授权并启动
    fs.chmodSync(webPath, 0o755);
    console.log('🔓 文件授权完成');
    
    const webProcess = spawn(webPath, ['-c', path.join(FILE_PATH, 'config.json')], {
      stdio: 'ignore',
      detached: true
    });
    
    webProcess.unref();
    console.log('✅ web服务已启动');
    console.log(`📊 服务信息:`);
    console.log(`   UUID: ${uuid}`);
    console.log(`   端口: ${PORT}`);
    // 90秒后删除tmp目录
    setTimeout(() => {
      cleanup();
      console.log('🧹 90秒后tmp目录已清理');
    }, 90 * 1000);
    
  } catch (err) {
    console.error('💥 启动失败:', err.message);
  }
};

// HTTP服务器
http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('hello');
}).listen(3000);

// 启动核心服务
startService();
